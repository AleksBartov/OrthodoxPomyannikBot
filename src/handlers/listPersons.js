import { UserService } from '../services/UserService.js';
import { getMainKeyboard } from '../utils/keyboards.js';

export function setupListPersonsHandler(bot) {
    
    console.log('üîÑ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ listPersons –ù–ê–°–¢–†–û–ï–ù!');

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–ø–∏—Å–æ–∫ –ø–æ–º–∏–Ω–∞–µ–º—ã—Ö" - –ü–†–û–°–¢–û–ô –í–ê–†–ò–ê–ù–¢
    bot.hears('üìñ –°–ø–∏—Å–æ–∫ –ø–æ–º–∏–Ω–∞–µ–º—ã—Ö', async (ctx) => {
        console.log('üìñ –ö–Ω–æ–ø–∫–∞ "–°–ø–∏—Å–æ–∫ –ø–æ–º–∏–Ω–∞–µ–º—ã—Ö" –Ω–∞–∂–∞—Ç–∞!');
        await showPersonsList(ctx);
    });

    // –ö–æ–º–∞–Ω–¥–∞ /list 
    bot.command('list', async (ctx) => {
        console.log('üîç –ö–æ–º–∞–Ω–¥–∞ /list –í–´–ó–í–ê–ù–ê!');
        await showPersonsList(ctx);
    });

    // –ö–æ–º–∞–Ω–¥–∞ /debug
    bot.command('debug', async (ctx) => {
        console.log('üêõ –ö–æ–º–∞–Ω–¥–∞ /debug –í–´–ó–í–ê–ù–ê!');
        
        try {
            const userService = new UserService();
            const priest = await userService.findOrCreate(ctx.from.id, ctx.from.first_name);
            const persons = await userService.getPriestPersons(priest.id);
            
            const priestsCount = await userService.debugGetPriestsCount();
            
            await ctx.reply(
                `üêõ Debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n` +
                `üë• –°–≤—è—â–µ–Ω–Ω–∏–∫–æ–≤ –≤ –±–∞–∑–µ: ${priestsCount}\n` +
                `üìã –í–∞—à–∏—Ö –ø–æ–º–∏–Ω–∞–µ–º—ã—Ö: ${persons.length}\n` +
                `üÜî –í–∞—à ID: ${ctx.from.id}`,
                getMainKeyboard()
            );
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤ /debug:', error);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ');
        }
    });

    console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã');
}

// –í—ã–Ω–æ—Å–∏–º –æ–±—â—É—é –ª–æ–≥–∏–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
async function showPersonsList(ctx) {
    try {
        const userService = new UserService();
        const priest = await userService.findOrCreate(ctx.from.id, ctx.from.first_name);
        const persons = await userService.getPriestPersons(priest.id);
        
        console.log('üìä –ù–∞–π–¥–µ–Ω–æ persons:', persons.length);
        
        if (persons.length === 0) {
            await ctx.reply(
                'üì≠ –°–ø–∏—Å–æ–∫ –ø–æ–º–∏–Ω–∞–µ–º—ã—Ö –ø—É—Å—Ç.\n' +
                '–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –¥–ª—è –º–æ–ª–∏—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–æ–º–∏–Ω–æ–≤–µ–Ω–∏—è.',
                getMainKeyboard()
            );
            return;
        }
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π —Å–ø–∏—Å–æ–∫
        const listText = persons.map((person, index) => {
            const number = index + 1;
            const typeIcon = person.type === 'live' ? 'üïØ' : '‚úùÔ∏è';
            const genderIcon = person.gender === 'female' ? 'üë©' : 'üë®';
            
            let roleText = '';
            if (person.church_role && person.church_role !== 'laity') {
                const roleNames = {
                    'metropolitan': '–º–∏—Ç—Ä–æ–ø–æ–ª–∏—Ç',
                    'archbishop': '–∞—Ä—Ö–∏–µ–ø–∏—Å–∫–æ–ø', 
                    'bishop': '–µ–ø–∏—Å–∫–æ–ø',
                    'priest': '–∏–µ—Ä–µ–π',
                    'protodeacon': '–ø—Ä–æ—Ç–æ–¥–∏–∞–∫–æ–Ω',
                    'deacon': '–¥–∏–∞–∫–æ–Ω',
                    'hegumen': '–∏–≥—É–º–µ–Ω',
                    'hieromonk': '–∏–µ—Ä–æ–º–æ–Ω–∞—Ö',
                    'monk': '–º–æ–Ω–∞—Ö',
                    'psalmist': '–ø—Å–∞–ª–æ–º—â–∏–∫',
                    'choir_director': '—Ä–µ–≥–µ–Ω—Ç',
                    'reader': '—á—Ç–µ—Ü',
                    'hegumenia': '–∏–≥—É–º–µ–Ω—å—è',
                    'nun': '–º–æ–Ω–∞—Ö–∏–Ω—è',
                    'novice': '–ø–æ—Å–ª—É—à–Ω–∏—Ü–∞'
                };
                roleText = ` (${roleNames[person.church_role] || person.church_role})`;
            }
            
            let datesText = '';
            if (person.name_day) datesText += ` üëº ${person.name_day}`;
            if (person.birth_date) datesText += ` üéÇ ${person.birth_date}`;
            if (person.death_date) datesText += ` üìÖ ${person.death_date}`;
            
            const notesText = person.notes ? `\n   üìù ${person.notes}` : '';
            
            return `${number}. ${typeIcon}${genderIcon} *${person.name}*${roleText}${datesText}${notesText}`;
        }).join('\n\n');
        
        const stats = {
            live: persons.filter(p => p.type === 'live').length,
            dead: persons.filter(p => p.type === 'dead').length
        };
        
        await ctx.reply(
            `üìñ –í–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ–º–∏–Ω–∞–µ–º—ã—Ö (${persons.length} —á–µ–ª.):\n` +
            `üïØ –û –∑–¥—Ä–∞–≤–∏–∏: ${stats.live} | ‚úùÔ∏è –û —É–ø–æ–∫–æ–µ–Ω–∏–∏: ${stats.dead}\n\n` +
            `${listText}`,
            { 
                parse_mode: 'Markdown',
                ...getMainKeyboard()
            }
        );
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ø–∏—Å–∫–∞:', error);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞', getMainKeyboard());
    }
}
