
import { UserService } from '../services/UserService.js';
import { getMainKeyboard, getEditPersonKeyboard, getEditFieldKeyboard, getConfirmationKeyboard } from '../utils/keyboards.js';
import { STATES, setUserState, getUserState, clearUserState } from '../core/states.js';

export function setupEditPersonHandler(bot) {
    
    console.log('üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...');

    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    bot.command('edit', async (ctx) => {
        await showEditMenu(ctx);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —á–µ–ª–æ–≤–µ–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    bot.action(/^edit_(\d+)$/, async (ctx) => {
        const userId = ctx.from.id;
        const personId = parseInt(ctx.match[1]);
        
        const userService = new UserService();
        const priest = await userService.findOrCreate(userId, ctx.from.first_name);
        const person = await userService.getPersonById(personId, priest.id);
        
        if (!person) {
            await ctx.editMessageText('‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return;
        }
        
        await showPersonEditMenu(ctx, person);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    bot.action(/^editfield_(\d+)_(name|type|notes|dates|archive)$/, async (ctx) => {
        const userId = ctx.from.id;
        const personId = parseInt(ctx.match[1]);
        const field = ctx.match[2];
        
        const userService = new UserService();
        const priest = await userService.findOrCreate(userId, ctx.from.first_name);
        const person = await userService.getPersonById(personId, priest.id);
        
        if (!person) {
            await ctx.editMessageText('‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return;
        }
        
        setUserState(userId, `EDIT_${field.toUpperCase()}`, { personId, person });
        
        switch (field) {
            case 'name':
                await ctx.editMessageText(
                    `‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏:\n\n` +
                    `–¢–µ–∫—É—â–µ–µ –∏–º—è: *${person.name}*\n\n` +
                    `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –≤ —Ä–æ–¥–∏—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ:`,
                    { parse_mode: 'Markdown', ...getEditFieldKeyboard('name', personId) }
                );
                break;
                
            case 'notes':
                await ctx.editMessageText(
                    `üí¨ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–º–µ—Ç–æ–∫:\n\n` +
                    `–¢–µ–∫—É—â–∏–µ –ø–æ–º–µ—Ç–∫–∏: ${person.notes || '–Ω–µ—Ç'}\n\n` +
                    `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –ø–æ–º–µ—Ç–∫–∏:`,
                    getEditFieldKeyboard('notes', personId)
                );
                break;
                
            case 'dates':
                await ctx.editMessageText(
                    `üìÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç:\n\n` +
                    `üëº –ò–º–µ–Ω–∏–Ω—ã: ${person.name_day || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
                    `üéÇ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è: ${person.birth_date || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
                    `üìÖ –î–∞—Ç–∞ –∫–æ–Ω—á–∏–Ω—ã: ${person.death_date || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n` +
                    `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú (–¥–ª—è –∏–º–µ–Ω–∏–Ω) –∏–ª–∏ –î–î.–ú–ú.–ì–ì–ì–ì:`,
                    getEditFieldKeyboard('dates', personId)
                );
                break;
                
            case 'archive':
                await ctx.editMessageText(
                    `üìã –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ:\n\n` +
                    `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å:\n\n` +
                    `*${person.name}*\n` +
                    `${person.type === 'live' ? 'üïØ –û –∑–¥—Ä–∞–≤–∏–∏' : '‚úùÔ∏è –û —É–ø–æ–∫–æ–µ–Ω–∏–∏'}\n` +
                    `${person.notes ? `üìù ${person.notes}\n` : ''}\n\n` +
                    `–ó–∞–ø–∏—Å—å –±—É–¥–µ—Ç —Å–∫—Ä—ã—Ç–∞ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.`,
                    { parse_mode: 'Markdown', ...getConfirmationKeyboard('archive', personId) }
                );
                break;
        }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏
    bot.action(/^confirm_(archive|cancel)_(\d+)$/, async (ctx) => {
        const userId = ctx.from.id;
        const action = ctx.match[1];
        const personId = parseInt(ctx.match[2]);
        
        if (action === 'cancel') {
            await ctx.editMessageText('‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ');
            return;
        }
        
        const userService = new UserService();
        const priest = await userService.findOrCreate(userId, ctx.from.first_name);
        
        if (action === 'archive') {
            const success = await userService.archivePerson(personId, priest.id);
            if (success) {
                await ctx.editMessageText('‚úÖ –ó–∞–ø–∏—Å—å –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∞');
            } else {
                await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏');
            }
        }
        
        clearUserState(userId);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    bot.on('text', async (ctx) => {
        const userId = ctx.from.id;
        const state = getUserState(userId);
        const text = ctx.message.text;

        if (!state.state) return;

        if (state.state.startsWith('EDIT_')) {
            const userService = new UserService();
            const priest = await userService.findOrCreate(userId, ctx.from.first_name);
            
            try {
                let updates = {};
                let successMessage = '';
                
                switch (state.state) {
                    case 'EDIT_NAME':
                        updates.name = text;
                        successMessage = `‚úÖ –ò–º—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: *${text}*`;
                        break;
                        
                    case 'EDIT_NOTES':
                        updates.notes = text;
                        successMessage = `‚úÖ –ü–æ–º–µ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: ${text}`;
                        break;
                        
                    case 'EDIT_DATES':
                        // –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è - –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å
                        if (text.includes('.') && (text.length === 5 || text.length === 10)) {
                            if (text.length === 5) {
                                updates.name_day = text;
                                successMessage = `‚úÖ –î–∞—Ç–∞ –∏–º–µ–Ω–∏–Ω –æ–±–Ω–æ–≤–ª–µ–Ω–∞: ${text}`;
                            } else {
                                if (state.data.person.type === 'dead') {
                                    updates.death_date = text;
                                    successMessage = `‚úÖ –î–∞—Ç–∞ –∫–æ–Ω—á–∏–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∞: ${text}`;
                                } else {
                                    updates.birth_date = text;
                                    successMessage = `‚úÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: ${text}`;
                                }
                            }
                        } else {
                            await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú –∏–ª–∏ –î–î.–ú–ú.–ì–ì–ì–ì');
                            return;
                        }
                        break;
                }
                
                if (Object.keys(updates).length > 0) {
                    const success = await userService.updatePerson(state.data.personId, priest.id, updates);
                    if (success) {
                        await ctx.reply(successMessage, { parse_mode: 'Markdown' });
                        
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                        const updatedPerson = await userService.getPersonById(state.data.personId, priest.id);
                        await showPersonEditMenu(ctx, updatedPerson);
                    } else {
                        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
                    }
                }
                
                clearUserState(userId);
                
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
                await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏');
                clearUserState(userId);
            }
        }
    });

    console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
}

async function showEditMenu(ctx) {
    const userService = new UserService();
    const priest = await userService.findOrCreate(ctx.from.id, ctx.from.first_name);
    const persons = await userService.getPriestPersons(priest.id);
    
    if (persons.length === 0) {
        await ctx.reply(
            'üì≠ –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.\n' +
            '–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –ø–æ–º–∏–Ω–∞–µ–º—ã—Ö.',
            getMainKeyboard()
        );
        return;
    }
    
    const personsList = persons.map(person => 
        `${person.type === 'live' ? 'üïØ' : '‚úùÔ∏è'} ${person.name}${person.notes ? ` (${person.notes})` : ''}`
    ).join('\n');
    
    await ctx.reply(
        `‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π\n\n` +
        `–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n` +
        `${personsList}`,
        getEditPersonKeyboard(persons)
    );
}

async function showPersonEditMenu(ctx, person) {
    const typeText = person.type === 'live' ? 'üïØ –û –∑–¥—Ä–∞–≤–∏–∏' : '‚úùÔ∏è –û —É–ø–æ–∫–æ–µ–Ω–∏–∏';
    const genderIcon = person.gender === 'female' ? 'üë©' : 'üë®';
    
    let datesText = '';
    if (person.name_day) datesText += `\nüëº –ò–º–µ–Ω–∏–Ω—ã: ${person.name_day}`;
    if (person.birth_date) datesText += `\nüéÇ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è: ${person.birth_date}`;
    if (person.death_date) datesText += `\nüìÖ –î–∞—Ç–∞ –∫–æ–Ω—á–∏–Ω—ã: ${person.death_date}`;
    
    await ctx.editMessageText(
        `‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:\n\n` +
        `*${person.name}*\n` +
        `${typeText} ${genderIcon}\n` +
        `${person.notes ? `üìù ${person.notes}` : ''}` +
        `${datesText}\n\n` +
        `–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?`,
        { parse_mode: 'Markdown', ...getEditPersonKeyboard([person]) }
    );
}