import { PersonService } from '../services/PersonService.js';
import { UserService } from '../services/UserService.js';
import { 
    STATES, 
    setUserState, 
    getUserState, 
    clearUserState 
} from '../core/states.js';
import { 
    getMainKeyboard, 
    getTypeKeyboard, 
    getGenderKeyboard, 
    getRoleTypeKeyboard, 
    getChurchRoleKeyboard, 
    getSkipKeyboard, 
    getCancelKeyboard,
    getSkipInlineKeyboard,
    getCancelInlineKeyboard
} from '../utils/keyboards.js';

export function setupAddPersonHandler(bot) {
    
    // –ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    bot.hears('‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–º–∏–Ω–∞–µ–º–æ–≥–æ', async (ctx) => {
        setUserState(ctx.from.id, STATES.AWAITING_TYPE);
        
        await ctx.reply(
            'üïØ –û –∫–æ–º –±—É–¥–µ–º –º–æ–ª–∏—Ç—å—Å—è?',
            getTypeKeyboard()
        );
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞
    bot.action(/^type_(live|dead)$/, async (ctx) => {
        const userId = ctx.from.id;
        const type = ctx.match[1];
        const state = getUserState(userId);
        
        state.data.type = type;
        state.state = STATES.AWAITING_GENDER;
        setUserState(userId, state.state, state.data);

        const typeText = type === 'live' ? '–æ –∑–¥—Ä–∞–≤–∏–∏' : '–æ —É–ø–æ–∫–æ–µ–Ω–∏–∏';
        
        await ctx.editMessageText(
            `üé≠ –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª –ø–æ–º–∏–Ω–∞–µ–º–æ–≥–æ ${typeText}:\n` +
            `*–≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏*`,
            { parse_mode: 'Markdown', ...getGenderKeyboard() }
        );
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
    bot.action(/^gender_(male|female|skip)$/, async (ctx) => {
        const userId = ctx.from.id;
        const state = getUserState(userId);
        const gender = ctx.match[1];
        
        if (gender !== 'skip') {
            state.data.gender = gender;
        }
        
        state.state = STATES.AWAITING_NAME;
        setUserState(userId, state.state, state.data);

        const typeText = state.data.type === 'live' ? '–æ –∑–¥—Ä–∞–≤–∏–∏' : '–æ —É–ø–æ–∫–æ–µ–Ω–∏–∏';
        const genderText = gender === 'male' ? '–º—É–∂—Å–∫–æ–≥–æ –ø–æ–ª–∞' : 
                          gender === 'female' ? '–∂–µ–Ω—Å–∫–æ–≥–æ –ø–æ–ª–∞' : '';
        
        await ctx.editMessageText(
            `‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –∏–º—è ${genderText} ${typeText} (–≤ —Ä–æ–¥–∏—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ):\n` +
            `–ù–∞–ø—Ä–∏–º–µ—Ä: ${gender === 'female' ? '"–ú–∞—Ä–∏–∏", "–õ—é–±–æ–≤–∏"' : '"–ò–æ–∞–Ω–Ω–∞", "–°–µ—Ä–≥–∏—è"'}`,
            getCancelInlineKeyboard()
        );
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–æ–ª–∏
    bot.action(/^role_(laity|clergy|church_server|skip)$/, async (ctx) => {
        const userId = ctx.from.id;
        const state = getUserState(userId);
        const roleType = ctx.match[1];
        
        if (roleType === 'skip') {
            await proceedToNextStep(ctx, userId, state);
            return;
        }
        
        if (roleType === 'laity') {
            state.data.roleType = 'laity';
            state.data.churchRole = 'laity';
            setUserState(userId, state.state, state.data);
            await proceedToNextStep(ctx, userId, state);
            return;
        }
        
        // –ü–†–û–í–ï–†–ö–ê: –¥–ª—è –∂–µ–Ω—â–∏–Ω –∏—Å–∫–ª—é—á–∞–µ–º —Å–≤—è—â–µ–Ω–Ω–∏—á–µ—Å–∫–∏–µ —Å–∞–Ω—ã
        if (state.data.gender === 'female' && roleType === 'clergy') {
            await ctx.editMessageText(
                '‚ùå *–ö–∞–Ω–æ–Ω–∏—á–µ—Å–∫–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ:*\n' +
                '–í –ü—Ä–∞–≤–æ—Å–ª–∞–≤–Ω–æ–π –¶–µ—Ä–∫–≤–∏ –∂–µ–Ω—â–∏–Ω—ã –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Å–≤—è—â–µ–Ω–Ω–æ—Å–ª—É–∂–∏—Ç–µ–ª—è–º–∏.\n\n' +
                '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å—Ç–∞—Ç—É—Å:',
                { parse_mode: 'Markdown', ...getRoleTypeKeyboard() }
            );
            return;
        }
        
        state.data.roleType = roleType;
        state.state = STATES.AWAITING_CHURCH_ROLE;
        setUserState(userId, state.state, state.data);
        
        const roleText = roleType === 'clergy' ? '—Å–≤—è—â–µ–Ω–Ω–æ—Å–ª—É–∂–∏—Ç–µ–ª—è' : '—Ü–µ—Ä–∫–æ–≤–Ω–æ—Å–ª—É–∂–∏—Ç–µ–ª—è';
        
        await ctx.editMessageText(
            `üé≠ –í—ã–±–µ—Ä–∏—Ç–µ —Å–∞–Ω ${roleText}:`,
            getChurchRoleKeyboard(state.data.gender)
        );
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ü–µ—Ä–∫–æ–≤–Ω–æ–π —Ä–æ–ª–∏
    bot.action(/^church_(metropolitan|archbishop|bishop|priest|protodeacon|deacon|hegumen|hieromonk|monk|psalmist|choir_director|reader|hegumenia|nun|novice|other|skip)$/, async (ctx) => {
        const userId = ctx.from.id;
        const state = getUserState(userId);
        const churchRole = ctx.match[1];
        
        if (churchRole !== 'skip') {
            state.data.churchRole = churchRole;
        }
        
        setUserState(userId, state.state, state.data);
        await proceedToNextStep(ctx, userId, state);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ —à–∞–≥–∞
    bot.action('skip_step', async (ctx) => {
        const userId = ctx.from.id;
        const state = getUserState(userId);
        
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥
        switch (state.state) {
            case STATES.AWAITING_DEATH_DATE:
                await handleDeathDateInput(ctx, userId, state, '‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å');
                break;
            case STATES.AWAITING_NAME_DAY:
                await handleNameDayInput(ctx, userId, state, '‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å');
                break;
            case STATES.AWAITING_BIRTH_DATE:
                await handleBirthDateInput(ctx, userId, state, '‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å');
                break;
            case STATES.AWAITING_NOTES:
                await handleNotesInput(ctx, userId, state, '‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å');
                break;
        }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –¥–∏–∞–ª–æ–≥–∞
    bot.action('cancel_dialog', async (ctx) => {
        const userId = ctx.from.id;
        clearUserState(userId);
        await ctx.editMessageText('–î–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω–µ–Ω');
        await ctx.telegram.sendMessage(userId, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', getMainKeyboard());
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–æ—Å–Ω–æ–≤–Ω–æ–π –¥–∏–∞–ª–æ–≥)
    bot.on('text', async (ctx) => {
        const userId = ctx.from.id;
        const state = getUserState(userId);
        const text = ctx.message.text;

        if (!state.state) return;

        // –û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞
        if (text === '‚ùå –û—Ç–º–µ–Ω–∞') {
            clearUserState(userId);
            await ctx.reply('–î–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω–µ–Ω', getMainKeyboard());
            return;
        }

        switch (state.state) {
            case STATES.AWAITING_NAME:
                await handleNameInput(ctx, userId, state, text);
                break;

            case STATES.AWAITING_DEATH_DATE:
                await handleDeathDateInput(ctx, userId, state, text);
                break;

            case STATES.AWAITING_NAME_DAY:
                await handleNameDayInput(ctx, userId, state, text);
                break;

            case STATES.AWAITING_BIRTH_DATE:
                await handleBirthDateInput(ctx, userId, state, text);
                break;

            case STATES.AWAITING_NOTES:
                await handleNotesInput(ctx, userId, state, text);
                break;
        }
    });
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async function handleNameInput(ctx, userId, state, text) {
    state.data.name = text;
    state.state = STATES.AWAITING_ROLE_TYPE;
    setUserState(userId, state.state, state.data);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º sendMessage –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
    await ctx.reply(
        'üé≠ –£–∫–∞–∂–∏—Ç–µ —Å—Ç–∞—Ç—É—Å:\n' +
        '‚Ä¢ üôè –ú–∏—Ä—è–Ω–∏–Ω - –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –ø—Ä–∏—Ö–æ–∂–∞–Ω\n' +
        '‚Ä¢ üõê –°–≤—è—â–µ–Ω–Ω–æ—Å–ª—É–∂–∏—Ç–µ–ª—å - —Ä—É–∫–æ–ø–æ–ª–æ–∂–µ–Ω–Ω—ã–µ –≤ —Å–≤—è—â–µ–Ω–Ω—ã–π —Å–∞–Ω\n' +
        '‚Ä¢ üìñ –¶–µ—Ä–∫–æ–≤–Ω–æ—Å–ª—É–∂–∏—Ç–µ–ª—å - –Ω–µ —Ä—É–∫–æ–ø–æ–ª–æ–∂–µ–Ω–Ω—ã–µ, –Ω–æ —Å–ª—É–∂–∞—â–∏–µ –≤ —Ü–µ—Ä–∫–≤–∏',
        getRoleTypeKeyboard()
    );
}

async function handleDeathDateInput(ctx, userId, state, text) {
    if (text !== '‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å') {
        state.data.deathDate = text;
    }
    
    state.state = STATES.AWAITING_NAME_DAY;
    setUserState(userId, state.state, state.data);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º sendMessage –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
    await ctx.reply(
        'üëº –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏–º–µ–Ω–∏–Ω —É—Å–æ–ø—à–µ–≥–æ(–µ–π) (–î–î.–ú–ú):\n' +
        '–ù–∞–ø—Ä–∏–º–µ—Ä: 29.09\n\n' +
        '*–ë—É–¥–µ–º —Å—É–≥—É–±–æ –º–æ–ª–∏—Ç—å—Å—è –≤ –¥–µ–Ω—å –ê–Ω–≥–µ–ª–∞*',
        { parse_mode: 'Markdown', ...getSkipKeyboard() }
    );
}

async function handleNameDayInput(ctx, userId, state, text) {
    if (text !== '‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å') {
        state.data.nameDay = text;
    }
    
    state.state = STATES.AWAITING_BIRTH_DATE;
    setUserState(userId, state.state, state.data);
    
    const isDead = state.data.type === 'dead';
    const personText = isDead ? '—É—Å–æ–ø—à–µ–≥–æ(–µ–π)' : '';
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º sendMessage –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
    await ctx.reply(
        `üéÇ –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è ${personText} (–î–î.–ú–ú.–ì–ì–ì–ì):\n` +
        '–ù–∞–ø—Ä–∏–º–µ—Ä: 15.03.1980\n\n' +
        '*–ë—É–¥–µ–º —Å—É–≥—É–±–æ –º–æ–ª–∏—Ç—å—Å—è –≤ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è*',
        { parse_mode: 'Markdown', ...getSkipKeyboard() }
    );
}

async function handleBirthDateInput(ctx, userId, state, text) {
    if (text !== '‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å') {
        state.data.birthDate = text;
    }
    
    state.state = STATES.AWAITING_NOTES;
    setUserState(userId, state.state, state.data);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º sendMessage –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
    await ctx.reply(
        'üìù –î–æ–±–∞–≤—å—Ç–µ –ø–æ–º–µ—Ç–∫–∏ (—Ä–æ–¥—Å—Ç–≤–æ, –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞ –∏ —Ç.–¥.):\n' +
        '–ù–∞–ø—Ä–∏–º–µ—Ä: "–ú–∞—Ç—å –ø—Ä–∏—Ö–æ–∂–∞–Ω–∫–∏ –ê–Ω–Ω—ã, –±–æ–ª–µ–ª–∞ –æ–Ω–∫–æ–ª–æ–≥–∏–µ–π"',
        getSkipKeyboard()
    );
}

async function handleNotesInput(ctx, userId, state, text) {
    if (text !== '‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å') {
        state.data.notes = text;
    }
    await finishAddingPerson(ctx, userId, state.data);
}

async function proceedToNextStep(ctx, userId, state) {
    const isDead = state.data.type === 'dead';
    
    if (isDead) {
        state.state = STATES.AWAITING_DEATH_DATE;
        setUserState(userId, state.state, state.data);
        
        await ctx.editMessageText(
            'üìÖ –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∫–æ–Ω—á–∏–Ω—ã (–î–î.–ú–ú.–ì–ì–ì–ì):\n' +
            '–ù–∞–ø—Ä–∏–º–µ—Ä: 15.10.2023',
            getSkipInlineKeyboard()
        );
    } else {
        state.state = STATES.AWAITING_NAME_DAY;
        setUserState(userId, state.state, state.data);
        
        await ctx.editMessageText(
            'üëº –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏–º–µ–Ω–∏–Ω (–î–î.–ú–ú):\n' +
            '–ù–∞–ø—Ä–∏–º–µ—Ä: 29.09\n\n' +
            '*–≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è —Å—É–≥—É–±–æ–≥–æ –ø–æ–º–∏–Ω–æ–≤–µ–Ω–∏—è –≤ –¥–µ–Ω—å –ê–Ω–≥–µ–ª–∞*',
            { parse_mode: 'Markdown', ...getSkipInlineKeyboard() }
        );
    }
}

async function finishAddingPerson(ctx, userId, personData) {
    try {
        const userService = new UserService();
        const personService = new PersonService();
        
        const priest = await userService.findOrCreate(userId, ctx.from.first_name);
        const personId = await personService.addPerson({
            priestId: priest.id,
            ...personData
        });

        const personCount = await personService.getPersonCount(priest.id);
        
        clearUserState(userId);
        
        const typeText = personData.type === 'live' ? '–æ –∑–¥—Ä–∞–≤–∏–∏' : '–æ —É–ø–æ–∫–æ–µ–Ω–∏–∏';
        await ctx.reply(
            `‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–º–∏–Ω–æ–≤–µ–Ω–∏–µ ${typeText}:\n` +
            `üôè *${personData.name}*\n` +
            `${personData.deathDate ? `üìÖ –ö–æ–Ω—á–∏–Ω–∞: ${personData.deathDate}\n` : ''}` +
            `${personData.nameDay ? `üëº –ò–º–µ–Ω–∏–Ω—ã: ${personData.nameDay}\n` : ''}` +
            `${personData.birthDate ? `üéÇ –†–æ–∂–¥–µ–Ω–∏–µ: ${personData.birthDate}\n` : ''}` +
            `${personData.notes ? `üìù –ü–æ–º–µ—Ç–∫–∏: ${personData.notes}\n` : ''}` +
            `\n–í—Å–µ–≥–æ –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ: *${personCount}* —á–µ–ª–æ–≤–µ–∫`,
            { parse_mode: 'Markdown', ...getMainKeyboard() }
        );

    } catch (error) {
        console.error('Error adding person:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏', getMainKeyboard());
    }
}
